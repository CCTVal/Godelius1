; 20020904
; This INI file is for use by the OPC Client devcom provided with
; Preview Client for HMI PE 5.5 and Higher
;
; This file must reside in the DATA subdirectory of the project directory.
; There is one INI file per OPC port configured in the project.
; The name reflects the port's ID. For example MASTER_OPC_0.INI for the
; first port, and MASTER_OPC_1.INI for the second port configured, etc.
;
; The purpose of this file is to allow the user to manually configure the
; OPC Port, Devices, and Groups. Unlike the global parameters file (GLB_PARMS)
; where settings applied to all devices or groups, settings here apply only
; to the specified device or group.
;
; This SAMPLE FILE contains ALL of the possible parameters. These parameters
; are set to their DEFAULT VALUE! If this INI file is not present, or if
; a particular Device or Group is not specified by a [Section Header],
; then the default values are used!
;
; For typical BOOLEAN parameters, a value of 1 means TRUE/ENABLE.  A value of
; 0 means FALSE/DISABLE.
;
; NOTE that the OPC client always creates TWO GROUPS where ALL points are
; placed unless you configure them otherwise. These groups are named:
; DEFAULTPOLL and DEFAULTUNSO. You can set parameters for these groups
; as well as the groups you define.
;
; NOTE there are a couple of parameters that apply to the 'Port' as a whole.
; These are placed in the section called [PortLevel].
;
[PortLevel]
; Should CIMPLICITY treat REAL values as four byte (float) or 8 byte (double)
; If the OPC server sends float values, then setting this to one (1) will have
; no affect on precision. If the server sends doubles, setting this to one (1)
; will maintain the precision as the value is passed into CIMPLICITY.
EightByteReals=0

; Should CIMPLICITY use the timestamp passed from the OPC server...
; (or provide its own timestamp at the time the update is received)
UseServerTimeStamp=1

; Controls the rate in Ticks (1 tick = 1/100 seconds) that Windows Messages
; are pumped by the OPC client. While the client has no use for these messages,
; it is required by the OS to process them. By default, it drains the message
; queue once every half second.
; We have found that older STA (single threaded) OPC servers can be affected
; by this. If the OPC server is not firing events at the rate you are asking for
; (see ScanRate below), you can try lowering this value.
; Note that draining the messages queue takes away from processing incoming data!
; Lowering this value means the message queue is drained more often.
; Default value is 50.
MessageTicks=50

; By default, tracing is to a circular file.  If disabled, logging 
; goes to the output file.  
CircularLog=1

; Size of circular log file (before it wraps)
LogFileSize=1000000

; Conversion of data types for many older servers was accomplished via a method
; called data type promotion. Because the VARIANT was not able to hold signed
; eight bit (SINT), unsigned sixteen bit (UINT), and unsigned thirty-two bit (UDINT)
; values, these types were 'promoted' to the next larger type that the VARIANT
; was capable of holding.
; As of Service Pack 4 for Windows NT, the VARIANT was redefined to allow these
; data types, making data type promotion obsolete.
; While newer OPC servers are making use of the new VARIANT types...
; MANY older OPC servers still expect data type promotion to occur.
; THIS INCLUDES THE CIMPLICITY OPC SERVER as of HMI 5.5.00!!!
; Since data type promotion is no longer typical, this parameter defaults to disabled.
UseDataTypePromotion=0

; Our OPC client calls the AsyncIO::Refresh method in the server whenever we
; (re)attach and add all the items to the server. This insures that we have
; an initial value for all unsolicited points. Many OPC servers do not
; require this because they detect a client 'Advising' and fire initial
; values at that point. Some OPC servers FAIL (return an error) when this
; method is called. In this last case, you may decide to set this option
; to FALSE (0) so our client does not attempt to make this method call.
RefreshUnsoItems=1

; Point by address points on a screen and 'Delayed Load' points are added
; to the OPC server one at a time. This has been the behavior until now,
; and remains the default behavior (this variable set to zero).
; If this is set to one [1], PBA and DL points are added in chunks for speed.
; The size of the chunks is determined by a new global parameter:DC_PTM_MSG_MAX.
BatchDynamicAdditions=0

; This option provides a way to override the DC_PTM_MSG_MAX global parameter
; without having to set the global parameter.
; The default value for this is fifty [50].
; Allowed values are from ten [10] to ten thousand [1000]
; Set this according to the number of points that might be placed into
; demand by any given screen within your application.
; NOTE: Even if the DC_PTM_MSG_MAX global parameter exists, this setting
;       will override it.
BatchAddBatchSize=50

; When BatchDynamicAdditions is TRUE (1), the OPC client relies on its
; parent process to tell it when dynamic additions begin, and when these
; additions have completed. Upon the 'completion' notification, the OPC
; client adds the 'batch' of items to the OPC server.
; In heavily loaded systems, it is possible for the 'completion' notification
; to be delayed or missed. In these cases, a timer in the OPC client will
; cause the batched points to be added without waiting (any longer) for the
; 'completion' notification. This variable determines how long the OPC client
; will wait for the 'completion' notification.
; The default value is two (2) seconds. The time is in TICKS (1/100th of a second)
BatchTimeToLive=200

; Added 20010823 for HMI 5.5.01 & 6.0.00
; Prior versions of the OPC Client always requested a variant type of VT_I2
; (signed int) for CIMPLICITY points of type BOOL. While we have not 
; encountered an OPC server yet that made an issue of this, we decided 
; that certainly the the obvious variant type for a BOOL point is VT_BOOL.
; If, for some reason, the OPC server is rejecting points of type BOOL,
; Set this parameter to TRUE (1) so VT_BOOL will be the requested type.
; For well behaved OPC servers, this will work either way.
AddBoolAsBool=0

; The CIMPLICITY Port (PortLevel) has a parameter for tracing that determines
; how much detail will be written to the trace log. See the description in the
; [DEVICE] section below.
TraceLevel=1

; ------------------------------------------------------------------
; Below are the Device specific parameters...
; You should change the [Section] names to match the Device ID’s
; configured in your project, and insure there is a [Section] for
; every OPC device you have configured!!!
; ------------------------------------------------------------------

[YourFirstDeviceID]
; ------------------------------------------------------------------
; The TRACE Parameters...
; ------------------------------------------------------------------
; Trace records from this device will be written to a separate 
; log file. (MASTER_OPC_x_YourFirstDeviceID.LOG)
; This is the default behavior unless this is expressly set to FALSE (0).
; If FALSE (0), this device will trace to the PortLevel log (MASTER_OPC_x.LOG).
TraceSeparate=1

; The TraceLevel determines how much trace data is written to the
; log file. At the lowest level (1), only serious errors will be
; logged. As the value increases to the maximum (7), more and more
; detail is written to the log for each enabled 'Section'.
; Be aware, nothing will log unless one or more of the ‘Sections’
; below are set to TRUE (1).
;
; BIGERRORS (the default)
TraceLevel=1
; ALLERRORS
;TraceLevel=2
; BIGSUCCESSES
;TraceLevel=3
; ALLSUCCESSES
;TraceLevel=4
; ITEMDETAILS
;TraceLevel=5
; DEVELOPER LEVEL 1
;TraceLevel=6
; DEVELOPER LEVEL 2
;TraceLevel=7

; Trace Sections (Activities)...
; Enable the OPC Client activities you wish to trace
; by setting the Parameter(s) to TRUE (1).
; By default, nothing traces...
TraceAll=0
TraceConnection=0
TraceGroupActivity=0
TraceItemActivity=0
TracePinging=0
TracePolling=0
TraceEvents=0
TraceWriting=0
TraceDequeue=0

; Some OPC servers take extra time to load their own point databases.
; Often, points added to the server by our client are declared invalid
; because the server was not ready to process additions.
; This delay occurs AFTER the OPC server is started, but,
; BEFORE any points are added by our client.
; Value is milliseconds!
StartupDelay=0

; Some OPC servers take extra time, AFTER a client has added points,
; getting initial values for those points. If a POLL occurs too soon
; values with BAD QUALITY are provided. To avoid this, the Read Delay
; causes our client to hesitate AFTER adding points but BEFORE the very
; first POLL.
; Value is milliseconds!
ReadDelay=0

; Our OPC client now PINGs the OPC server on a regular basis.
; The Ping Interval determines how often this ping occurs.
; Value is milliseconds!
PingInterval=5000

; If the method call made by the Ping (IOPCServer::GetStatus) takes
; too long to return, our client declares a communication error.
; The Ping Timeout determines how long to wait for this method call.
; Value is milliseconds!
PingTimeout=3000

; If the following parameter is TRUE (1), our client will shut down
; (on project shutdown) WITHOUT releasing any references to objects
; in the OPC server. This is STRICTLY against the rules of OLE!!!
; However, it will allow the CIMPLICITY project to shut down in a
; minimum amount of time. The OPC server will most likely NOT shut
; down at all, since it will believe that our client is still attached!
AbortShutdown=0

; If the following parameter is TRUE (1), our client will access the
; local registry information to find the OPC server ID first. If the 
; devcom fails to find the server information in local registry, it 
; will then log warning message and search the information in the 
; remote node. This parameter is used to resolve the multi-sessions 
; issue
UseLocalReg=0

; After a ping fails, this is the number of milliseconds that the client
; will wait after detecting a lack of response from the server via a ping
; before it will force an abort of the connection
DCOMTimeoutThreshold=10000

; When a network connection is broken between the OPC client and server
; in a DCOM situation, the very next method call the client makes
; (usually a POLL [ISyncIO::Read]) can HANG for upwards of 90 seconds.
; This causes ALL device communication in CIMPLICITY to hang until the
; method call times out. By Pinging the OPC server immediately before
; the method call, our client can eliminate MOST of these potential
; DCOM timeouts (since Pinging occurs on a different thread).
; Note that this DOES add the overhead of an extra call to the server
; per poll request (or write request)... But with a DCOM timeout of
; 90 seconds... you may consider this well worth it!!!
PingBeforePoll=1
PingBeforeWrite=1

; The Client will by default establish a connection using OPC 2.0 methods if
; the Server will support it.  (It will use 1.0 if the server does not.)  To 
; force the use of 1.0 methods, enable this variable.
ForceOPC1Server=0

; In Host Redundant environments, by default, the acting master will advise 
; for the points that are defined to be  unsolicited/unsolicited on change/
; poll once/poll once on change  (i.e. the server polls the data and notifies 
; the client only of those items that have changed). Some servers may be slow 
; in collecting the data  resulting in transition times for the unsolicited
; data.  By, all data will be advised and refreshed (unless refresh is 
; disabled) on host transition. Enabling this variable will result in both 
; servers advising the client.  The result will be more traffic  both a 
; lower transition time.  It is possible that data that changes during the 
; transition between hosts may be lost for points with an unsolicited or 
; unsolicited on change update criteria. 
HRBothActive=0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; WARNING!!!!!!
; In adjusting the following 2  parameters, it may be necessary to adjust 
; the amountof time the process manager waits for the process to shutdown.  
; Call the  CIMPLICITY help desk if you need to adjust this parameter.  
; Test out the configuration very thoroughly to ensure that if the values
; are increased, that the process manager is giving enough time for the 
; OPCCLIENT to shutdown.  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; If server is slow, heavy load, etc. it may be necessary to change this 
; parameter.  If set to zero, it will be equal to twice the PingTimeout
; Otherwise, the absolute time value will be used.  Time is in milliseconds.  
PingShutdown=0
;
; For large configurations, it may take longer for the OPC Server to clean
; up its configuration.  
; Time is in milliseconds
DeviceShutdown=10000

; Open Designer Simulator OPC Server Alternate Name
; Leave undefined unless the Open Designer Simulator and Server name changes
;OpenDesignerServer=DesignerSim

; In all releases of HMI 5.x, when the OPC server rejected a point based on
; requested data type, the OPC client would automatically re-add the item
; as VT_EMPTY. The OPC specification says that, in this case, the OPC server
; WILL NOT reject the point based on the requested type.
; Doing this was originally considered a 'convenience' to the user...
; Points that would otherwise be rejected by the OPC server are now accepted,
; and the VariantChangeType API call is used to 'coerse' the data into the
; proper type for CIMPLICITY.
; Customer experience has shown that this does NOT always yield the desired
; result! Due to the nature of the VariantChangeType API, proper 'coersion'
; is not always possible. In other words, the OPC server is often justified
; in rejecting a point based on the request data type.
; The default value of TRUE (1) is intended to provide behavior consistent
; with prior releases of the OPC client...
; HOWEVER, BE AWARE that future releases of the OPC client MAY CHANGE THIS DEFAULT!
; You should attempt to run your project with this variable set to FALSE (0).
; If points are rejected, then the OPC server disagrees with the point type
; configured in CIMPLICITY! You should investigate this and determine why.
ReAddAsEmptyOnBadType=1


; We have found that in some situations with a particular OPC Server, the GetStatus 
; doesn't return. This should never happen, but it has.  For situations where this is encountered, 
; the following feature should be changed from it's default disabled state to
; an enabled state.  When the feature is enabled, logic within the OPC Client will
; check for a failure of the GetStatus to return based on the PingTimeOut for the device.
DetectPingHang=0

; In some cases, the detection of the ping hang or timeout is undesirable.
; If there is certainty that the OPC Server will NEVER hang, then this parameter
; can be used to disable shutdown of the OPC Server due to a lack of response with a 
; specific time period.
;
;  If set to 1, this parameter overrides DetectPingHang
IgnorePingTimeoutHang=0

;
;  If set to 1, this parameter will result in a Result of 0x8001010A 
;  (RPC_E_SERVERCALL_RETRYLATER) being treated as a success 
;
BusyIsSuccessOnPing = 0

; Once the project is running, the connection between the OPC client and server
; may be lost for any number of reasons. The OPC client tries to detect this,
; and re-establish the connection.
; The following Delay determines how long the OPC client will wait before
; attempting to re-establish the connection.
; NOTE: Once this delay has passed, and the OPC client begins attempting to
; re-establish the connection, it continues trying until it succeeds. This may
; take several attempts. How long to wait between each attempt is set with
; the 'ReconnectInterval' below.
; The delay is in milliseconds. The default is 10000 (ten seconds).
RestartDelay=10000

; As the OPC client tries to re-establish a broken connection to the OPC server,
; it may have to make several attempts. This value is the number of milliseconds
; between each attempt. The default is 1000 (one second).
; NOTE: This does NOT include the latency of the attempt. When the OPC client
; requests a connection to the server from Microsoft's COM (DCOM) engine,
; the engine can take as long as ninety seconds to decide it is unable to
; launch the OPC server application.
ReconnectInterval=1000

; When Deleting a Group, by default, the items are first removed from the group.
; This step can be skipped by disabling this variable
RemoveItemsOnGroupRemove=1

; When Device Enable/Disable Transitions - Enable/Disable Group State for related Groups
; appropriately.  Default Action is On (Enabled)
ChangeGroupStateOnDeviceTransition=1

; When Host Transitions Between Primary and Secondary - Enable/Disable Group State for 
; related Groups.  Default value is off (Disabled)
ChangeGroupStateOnHostTransition=0

; By default, you can setup an access path by <access path>;item tag
; This is okay as long as a semi-colon is not intended in the actual item tag
; This variable enables access paths for a given device, to avoid the search
; for the access path.  By default, value is on (Enabled)
ItemAccessPathEnable=0

; ItemAccessDelimiter defines the token to use for the access path if ItemAccessPath is enabled
; By default, the value of the delimiter is a semi-colon.  A value of space cannot be assigned
ItemAccessPathDelimiter=;

[YourNextDeviceID]
TraceAll=1
TraceLevel=2
StartupDelay=0
ReadDelay=0
PingInterval=5000
PingTimeout=3000
AbortShutdown=0
UseLocalReg=0
DCOMTimeoutThreshold=10000
PingBeforePoll=1
PingBeforeWrite=1
ForceOPC1Server=0
HRBothActive=0
PingShutdown=0
DeviceShutdown=10000
ReAddAsEmptyOnBadType=1
DetectPingHang=0
IgnorePingTimeoutHang=0
RestartDelay=10000
ReconnectInterval=1000
RemoveItemsOnGroupRemove=1
ChangeGroupStateOnDeviceTransition=1
ChangeGroupStateOnHostTransition=0
ItemAccessPathEnable=1
ItemAccessDelimiter=;


; ------------------------------------------------------------------
; Below are the OPC Group specific parameters...
; You should change the [Section] names to match the OPC Groups
; configured in your project, and insure there is a [Section] for
; every OPC Group you have configured!!!
; Leave the [DEFAULTPOLL] and [DEFAULTUNSO] sections. These two
; groups are created by the OPC Client, and always exist.
; ------------------------------------------------------------------

[DEFAULTPOLL]
; This is the Scan Rate passed to the OPC server for this group.
; It tells the OPC server how often to update the items in this group
; with fresh device data. It also determines how often
; to fire DataChange events to our client.  The unit of measure is in 
; milliseconds and the default value is 1 second.
; If you require faster value updates, ; you can decrease this value to a 
; value as low as ZERO.  ZERO tells the OPC server to update values 'as fast 
; as possible'.  For servers able to collect rapidly changing data very 
; rapidly, in a DCOM environment, it is possible to send the data faster than
; can be supported by the hardware/operating system on a sustained basis.
; Caution is urged before setting this to a value of ZERO.
; NOTE: As the scan rate decreases CPU usage may rise (somewhat significantly)
; and a corresponding increase in network traffic may be observed in a DCOM
; environment
ScanRate=1000

; Some OPC servers (such as OMNISERVER) do not use the Access Path
; when adding points. Instead, the Access Path  must be pre-pended in
; front of the Item ID. Enabling this feature  allows these OPC servers
; to have the Item IDs include the access path, separated by a period.
NoAccessPath=0

; Some OPC Servers benefit from a delay before executing a REFRESH after
; adding all of the items
DelayBeforeRefresh=0


; For polled operations, the Client will retrieve required data from the
; Servers cache.  For other operations, (i.e. poll after set) by default, it 
; will request that the OPC Server read the data from the device.  This can 
; significantly affect performance where the functionality is fully
; supported.  To force all reads from the cache, disable this variable.  It 
; is enabled by default.
DeviceReadAfterSet=1

[MYGROUP01]
ScanRate=1000
DeviceReadAfterSet=1
NoAccessPath=0
DelayBeforeRefresh=0

[DEFAULTUNSO]
ScanRate=1000
DeviceReadAfterSet=1
NoAccessPath=0
DelayBeforeRefresh=0
